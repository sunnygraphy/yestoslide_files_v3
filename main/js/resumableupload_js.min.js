"use strict";!function(r){let ResumableUploadToGoogleDrive;ResumableUploadToGoogleDrive=function(){function ResumableUploadToGoogleDrive(){this.obj={},this.chunkSize=52428800,this.endpoint="https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable"}ResumableUploadToGoogleDrive.prototype.Do=async function(resource,callback){callback({status:"initialize"},null);try{this.obj=await init.call(this,resource)}catch(err){return void callback(null,err)}const uint8Array=new Uint8Array(this.obj.resource.fileBuffer),chunkPot=getChunkPot.call(this),chunks=chunkPot.chunks.map((function(e){return{data:uint8Array.slice(e.startByte,e.endByte+1),length:e.numByte,range:"bytes "+e.startByte+"-"+e.endByte+"/"+chunkPot.total,startByte:e.startByte,endByte:e.endByte,total:chunkPot.total}}));try{const head=await getLocation.call(this);this.location=head.get("location"),callback({status:"getLocation"},null),doUpload.call(this,chunks,(function(res,err){err?callback(null,err):callback(res,null)}))}catch(err){return void callback(null,err)}};const init=function(resource){return new Promise((resolve,reject)=>{if(!("accessToken"in resource&&"fileName"in resource&&"fileSize"in resource&&"fileType"in resource&&"fileBuffer"in resource))return void reject({Error:"There are no required parameters. accessToken, fileName, fileSize, fileType and fileBuffer are required."});let object={};object.resource=resource,"chunkSize"in resource&&resource.chunkSize>=262144&&resource.chunkSize%1024==0&&(this.chunkSize=resource.chunkSize),"fields"in resource&&""!=resource.fields&&(this.endpoint+="&fields="+encodeURIComponent(resource.fields)),"convertToGoogleDocs"in resource&&resource.convertToGoogleDocs?fetch("https://www.googleapis.com/drive/v3/about?fields=importFormats",{method:"GET",headers:{Authorization:"Bearer "+resource.accessToken}}).then(res=>{200==res.status?res.json().then(res=>{resource.fileType in res.importFormats&&(object.resource.fileType=res.importFormats[resource.fileType][0]),resolve(object)}):res.json().then(e=>reject(e))}).catch(err=>{reject(err)}):resolve(object)})},getChunkPot=function(){const chunkSize=this.chunkSize,fileSize=this.obj.resource.fileSize;let chunkPot={};if(chunkPot.total=fileSize,chunkPot.chunks=[],fileSize>chunkSize){const numE=chunkSize,endS=function(f,n){const c=f%n;return 0==c?0:c}(fileSize,numE),repeat=Math.floor(fileSize/numE);for(let i=0;i<=repeat;i++){const startAddress=i*numE;let c={};c.startByte=startAddress,i<repeat?(c.endByte=startAddress+numE-1,c.numByte=numE,chunkPot.chunks.push(c)):i==repeat&&endS>0&&(c.endByte=startAddress+endS-1,c.numByte=endS,chunkPot.chunks.push(c))}}else{const chunk={startByte:0,endByte:fileSize-1,numByte:fileSize};chunkPot.chunks.push(chunk)}return chunkPot},getLocation=function(){return new Promise((resolve,reject)=>{const resource=this.obj.resource,accessToken=resource.accessToken;let metadata={mimeType:resource.fileType,name:resource.fileName};"folderId"in resource&&""!=resource.folderId&&(metadata.parents=[resource.folderId]),fetch(this.endpoint,{method:"POST",body:JSON.stringify(metadata),headers:{Authorization:"Bearer "+accessToken,"Content-Type":"application/json"}}).then(res=>{200==res.status?resolve(res.headers):res.json().then(e=>reject(e))}).catch(err=>{reject(err)})})},doUpload=function(chunks,callback){callback({status:"start"},null);const location=this.location,end=chunks.length;let cnt=0;const doFetch=function(cnt){const e=chunks[cnt];callback({status:"Uploading",progressNumber:{current:cnt,end:end},progressByte:{current:e.startByte,end:e.endByte,total:e.total}},null),fetch(location,{method:"PUT",body:e.data,headers:{"Content-Range":e.range}}).then(res=>{const status=res.status;if(cnt+=1,308==status)doFetch(cnt);else{if(200!=status)return void res.json().then(err=>{err.additionalInformation="When the file size is large, there is the case that the file cannot be converted to Google Docs. Please be careful this.",callback(null,err)});res.json().then(r=>callback({status:"Done",result:r},null))}}).catch(err=>{callback(null,err)})};doFetch(0)};return ResumableUploadToGoogleDrive}(),r.ResumableUploadToGoogleDrive=ResumableUploadToGoogleDrive}(this);